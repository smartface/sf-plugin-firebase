// Generated by Apple Swift version 4.0.3 effective-3.2.3 (swiftlang-900.0.74.1 clang-900.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AVFoundation;
@import JavaScriptCore;
@import AudioToolbox;
@import Foundation;
@import CoreMedia;
@import ObjectiveC;
@import MapKit;
@import CoreLocation;
@import QuartzCore;
@import CoreGraphics;
@import UIKit;
@import Speech;
@import AVKit;
@import QuickLook;
@import CoreFoundation;
@import WebKit;
#endif

#import <SMFNative/SMFNative.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("SMFNative")

SWIFT_PROTOCOL("_TtP9SMFNative14NSObjectExport_")
@protocol NSObjectExport <JSExport>
- (id _Nullable)valueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
- (NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
@end


@interface AVAudioEngine (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end

@class AVAudioNode;
@class AVAudioFormat;
@class AVAudioConnectionPoint;
@class JSValue;
@class AVAudioOutputNode;
@class AVAudioInputNode;
@class AVAudioMixerNode;

SWIFT_PROTOCOL("_TtP9SMFNative19AVAudioEngineExport_")
@protocol AVAudioEngineExport <JSExport>
- (nonnull instancetype)init;
- (void)attach:(AVAudioNode * _Nonnull)node;
- (void)detach:(AVAudioNode * _Nonnull)node;
- (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 fromBus:(AVAudioNodeBus)bus1 toBus:(AVAudioNodeBus)bus2 format:(AVAudioFormat * _Nullable)format;
- (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 format:(AVAudioFormat * _Nullable)format;
- (void)connect:(AVAudioNode * _Nonnull)sourceNode to:(NSArray<AVAudioConnectionPoint *> * _Nonnull)destNodes fromBus:(AVAudioNodeBus)sourceBus format:(AVAudioFormat * _Nullable)format SWIFT_AVAILABILITY(ios,introduced=9.0);
- (void)disconnectNodeInput:(AVAudioNode * _Nonnull)node bus:(AVAudioNodeBus)bus;
- (void)disconnectNodeInput:(AVAudioNode * _Nonnull)node;
- (void)disconnectNodeOutput:(AVAudioNode * _Nonnull)node bus:(AVAudioNodeBus)bus;
- (void)disconnectNodeOutput:(AVAudioNode * _Nonnull)node;
- (void)prepare;
- (void)start:(JSValue * _Nullable)errorHandler;
- (void)pause;
- (void)reset;
- (void)stop;
- (AVAudioConnectionPoint * _Nullable)inputConnectionPointFor:(AVAudioNode * _Nonnull)node inputBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
- (NSArray<AVAudioConnectionPoint *> * _Nonnull)outputConnectionPointsFor:(AVAudioNode * _Nonnull)node outputBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
@property (nonatomic) MusicSequence _Nullable musicSequence;
@property (nonatomic, readonly, strong) AVAudioOutputNode * _Nonnull outputNode;
@property (nonatomic, readonly, strong) AVAudioInputNode * _Nullable inputNode;
@property (nonatomic, readonly, strong) AVAudioMixerNode * _Nonnull mainMixerNode;
@property (nonatomic, readonly) BOOL isRunning;
@end


@interface AVAudioNode (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end

@class AVAudioTime;

SWIFT_PROTOCOL("_TtP9SMFNative17AVAudioNodeExport_")
@protocol AVAudioNodeExport <JSExport>
- (void)reset;
- (AVAudioFormat * _Nonnull)inputFormatForBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT;
- (AVAudioFormat * _Nonnull)outputFormatForBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)nameForInputBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)nameForOutputBus:(AVAudioNodeBus)bus SWIFT_WARN_UNUSED_RESULT;
- (void)removeTapOnBus:(AVAudioNodeBus)bus;
@property (nonatomic, readonly, strong) AVAudioEngine * _Nullable engine;
@property (nonatomic, readonly) NSInteger numberOfInputs;
@property (nonatomic, readonly) NSInteger numberOfOutputs;
@property (nonatomic, readonly, strong) AVAudioTime * _Nullable lastRenderTime;
- (void)installTap:(AVAudioNodeBus)onBus :(AVAudioFrameCount)bufferSize :(AVAudioFormat * _Nonnull)format :(JSValue * _Nullable)handler;
@end



@protocol AVAudioPlayerDelegate;

SWIFT_PROTOCOL("_TtP9SMFNative19AVAudioPlayerExport_")
@protocol AVAudioPlayerExport <JSExport>
- (nullable instancetype)initWithContentsOf:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (void)play;
- (void)pause;
- (void)stop;
@property (nonatomic) BOOL isPlaying;
@property (nonatomic) float volume;
@property (nonatomic, strong) id <AVAudioPlayerDelegate> _Nullable delegate;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) NSTimeInterval currentTime;
- (BOOL)prepareToPlay SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@end


@interface AVAudioSession (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end


SWIFT_PROTOCOL("_TtP9SMFNative20AVAudioSessionExport_")
@protocol AVAudioSessionExport <JSExport>
+ (AVAudioSession * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (void)setCategory:(NSString * _Nonnull)category :(JSValue * _Nullable)errorHandler;
- (void)setMode:(NSString * _Nonnull)mode :(JSValue * _Nullable)errorHandler;
- (void)setActive:(BOOL)active :(JSValue * _Nullable)errorHandler;
- (void)setActiveWithOptions:(BOOL)active :(NSInteger)options :(JSValue * _Nullable)errorHandler;
- (void)requestRecordPermission:(PermissionBlock _Nonnull)response;
- (AVAudioSessionRecordPermission)recordPermission SWIFT_WARN_UNUSED_RESULT;
- (void)requestRecordPermissionWithHandler:(JSValue * _Nullable)handler;
@end


@interface AVPlayer (SWIFT_EXTENSION(SMFNative))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class NSURL;
@class AVPlayerItem;

SWIFT_PROTOCOL("_TtP9SMFNative14AVPlayerExport_")
@protocol AVPlayerExport <JSExport>
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)URL;
- (void)play;
+ (AVPlayer * _Nonnull)createFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)pause;
- (void)seekTo:(CMTime)time;
@property (nonatomic, readonly, strong) AVPlayerItem * _Nullable currentItem;
- (double)duration SWIFT_WARN_UNUSED_RESULT;
- (double)getCurrentTime SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) float volume;
@property (nonatomic) float rate;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item;
- (void)replaceCurrentItem:(AVPlayerItem * _Nonnull)item;
- (void)seekToMillisecond:(double)millisecond;
- (void)addObserver;
@property (nonatomic, strong) JSValue * _Nullable AVPlayerItemDidPlayToEndTime;
@property (nonatomic, strong) JSValue * _Nullable onReady;
- (void)removeObserver;
@end



@class AVAsset;

SWIFT_PROTOCOL("_TtP9SMFNative18AVPlayerItemExport_")
@protocol AVPlayerItemExport <JSExport>
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)URL;
@property (nonatomic, readonly, strong) AVAsset * _Nonnull asset;
+ (AVPlayerItem * _Nonnull)createFromURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP9SMFNative16AVURLAssetExport_")
@protocol AVURLAssetExport <JSExport>
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)URL;
@property (nonatomic, readonly) CMTime duration;
@property (nonatomic, readonly) BOOL isPlayable;
@end

@class UIColor;
@class UIImage;
@class NSDictionary;
@class Annotation;

SWIFT_PROTOCOL("_TtP9SMFNative16AnnotationExport_")
@protocol AnnotationExport <JSExport>
@property (nonatomic, strong) UIColor * _Nullable color;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable subtitle;
@property (nonatomic) BOOL visible;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, strong) NSDictionary * _Nullable setCoordinate;
@property (nonatomic, strong) JSValue * _Nullable onPress;
+ (Annotation * _Nonnull)createAnnotation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9SMFNative10Annotation")
@interface Annotation : NSObject <MKAnnotation, AnnotationExport>
@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, strong) UIColor * _Nullable color;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable subtitle;
@property (nonatomic) BOOL visible;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, strong) JSValue * _Nullable onPress;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Annotation (SWIFT_EXTENSION(SMFNative))
+ (Annotation * _Nonnull)createAnnotation SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSDictionary * _Nullable setCoordinate;
@end


typedef SWIFT_ENUM(NSInteger, ButtonState) {
  ButtonStateNormal = 0,
  ButtonStateDisabled = 1,
  ButtonStateSelected = 2,
  ButtonStatePressed = 3,
  ButtonStateFocused = 4,
};



@class NSNumber;

SWIFT_PROTOCOL("_TtP9SMFNative21CAGradientLayerExport_")
@protocol CAGradientLayerExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, copy) NSArray * _Nullable colors;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable locations;
@property (nonatomic) CGPoint startPoint;
@property (nonatomic) CGPoint endPoint;
+ (CAGradientLayer * _Nonnull)createGradient:(UIColor * _Nonnull)startColor :(UIColor * _Nonnull)endColor :(CGPoint)startPosition :(CGPoint)endPosition SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)layerToColor SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)layerToImage SWIFT_WARN_UNUSED_RESULT;
@end


@interface CALayer (SWIFT_EXTENSION(SMFNative))
@property (nonatomic) CGFloat rotationX;
@property (nonatomic) CGFloat rotationY;
@property (nonatomic) CGFloat rotationZ;
- (void)rotate;
@end


SWIFT_PROTOCOL("_TtP9SMFNative13CALayerExport_")
@protocol CALayerExport <JSExport>
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) BOOL masksToBounds;
@property (nonatomic, strong) UIColor * _Nullable borderUIColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic, copy) NSArray<CALayer *> * _Nullable sublayers;
- (void)removeFromSuperlayer;
@property (nonatomic) CGRect frame;
@property (nonatomic, strong) UIColor * _Nullable backgroundUIColor;
- (void)removeAllAnimations;
@property (nonatomic) CATransform3D transform;
@property (nonatomic) CGFloat rotationX;
@property (nonatomic) CGFloat rotationY;
@property (nonatomic) CGFloat rotationZ;
- (void)rotate;
@end




SWIFT_PROTOCOL("_TtP9SMFNative31CLLocationManagerDelegateExport_")
@protocol CLLocationManagerDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable didUpdateLocations;
@property (nonatomic, strong) JSValue * _Nullable didChangeAuthorizationStatus;
@end

@protocol CLLocationManagerDelegate;

SWIFT_PROTOCOL("_TtP9SMFNative23CLLocationManagerExport_")
@protocol CLLocationManagerExport <JSExport>
- (nonnull instancetype)init;
- (void)requestWhenInUseAuthorization;
- (void)requestAlwaysAuthorization;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
@property (nonatomic, strong) id <CLLocationManagerDelegate> _Nullable delegate;
+ (BOOL)locationServicesEnabled SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP9SMFNative15CTCarrierExport_")
@protocol CTCarrierExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nullable carrierName;
@end

@class CTCarrier;

SWIFT_PROTOCOL("_TtP9SMFNative28CTTelephonyNetworkInfoExport_")
@protocol CTTelephonyNetworkInfoExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, strong) CTCarrier * _Nullable subscriberCellularProvider;
@end

typedef SWIFT_ENUM(NSInteger, ControlEvent) {
  ControlEventTouchDown = 0,
  ControlEventTouchDownRepeat = 1,
  ControlEventTouchDragInside = 2,
  ControlEventTouchDragOutside = 3,
  ControlEventTouchDragEnter = 4,
  ControlEventTouchDragExit = 5,
  ControlEventTouchUpInside = 6,
  ControlEventTouchUpOutside = 7,
  ControlEventTouchCancel = 8,
  ControlEventValueChanged = 9,
};

@class UIDatePicker;
@class NSCoder;

SWIFT_CLASS("_TtC9SMFNative16DatePickerDialog")
@interface DatePickerDialog : UIView
@property (nonatomic, strong) UIDatePicker * _Null_unspecified datePicker;
- (nonnull instancetype)initWithShowCancelButton:(BOOL)showCancelButton OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Create the dialog view, and animate opening the dialog
- (void)show:(NSString * _Nonnull)title is24HourFormat:(BOOL)is24HourFormat doneButtonTitle:(NSString * _Nonnull)doneButtonTitle cancelButtonTitle:(NSString * _Nonnull)cancelButtonTitle defaultDate:(NSDate * _Nonnull)defaultDate minimumDate:(NSDate * _Nullable)minimumDate maximumDate:(NSDate * _Nullable)maximumDate datePickerMode:(UIDatePickerMode)datePickerMode callback:(void (^ _Nonnull)(NSDate * _Nullable))callback;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9SMFNative8Dispatch")
@interface Dispatch : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP9SMFNative14DispatchExport_")
@protocol DispatchExport <JSExport>
+ (void)mainAsync:(JSValue * _Nonnull)block;
+ (void)mainAsyncAfter:(JSValue * _Nonnull)block :(NSInteger)millisecond;
@end

@class FloatyItem;
enum FloatyAlignment : NSInteger;
enum FloatyOpenAnimationType : NSInteger;
@class FloatyManager;
@protocol FloatyDelegate;
@class UIEvent;
@class UITouch;

/// Floaty Object. It has <code>FloatyItem</code> objects.
/// Floaty support storyboard designable.
SWIFT_CLASS("_TtC9SMFNative6Floaty")
@interface Floaty : UIView
/// <code>FloatyItem</code> objects.
@property (nonatomic, copy) NSArray<FloatyItem *> * _Nonnull items;
/// This object’s button size.
@property (nonatomic) CGFloat size;
/// Padding from bottom right of UIScreen or superview.
@property (nonatomic) CGFloat paddingX;
@property (nonatomic) CGFloat paddingY;
@property (nonatomic) enum FloatyAlignment alignment;
/// Automatically closes child items when tapped
@property (nonatomic) BOOL autoCloseOnTap;
/// Degrees to rotate image
@property (nonatomic) CGFloat rotationDegrees;
/// Animation speed of buttons
@property (nonatomic) double animationSpeed;
/// Button color.
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
/// Button image.
@property (nonatomic, strong) UIImage * _Nullable buttonImage;
/// Plus icon color inside button.
@property (nonatomic, strong) UIColor * _Nonnull plusColor;
/// Background overlaying color.
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
/// The space between the item and item.
@property (nonatomic) CGFloat itemSpace;
/// Child item’s default size.
@property (nonatomic) CGFloat itemSize;
/// Child item’s default button color.
@property (nonatomic, strong) UIColor * _Nonnull itemButtonColor;
/// Child item’s default title label color.
@property (nonatomic, strong) UIColor * _Nonnull itemTitleColor;
/// Child item’s image color
@property (nonatomic, strong) UIColor * _Nullable itemImageColor;
/// Child item’s default shadow color.
@property (nonatomic, strong) UIColor * _Nonnull itemShadowColor;
///
@property (nonatomic) BOOL closed;
@property (nonatomic) enum FloatyOpenAnimationType openAnimationType;
@property (nonatomic) BOOL friendlyTap;
@property (nonatomic) BOOL sticky;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FloatyManager * _Nonnull global;)
+ (FloatyManager * _Nonnull)global SWIFT_WARN_UNUSED_RESULT;
/// Delegate that can be used to learn more about the behavior of the FAB widget.
@property (nonatomic, weak) IBOutlet id <FloatyDelegate> _Nullable fabDelegate;
/// Initialize with default property.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize with custom size.
- (nonnull instancetype)initWithSize:(CGFloat)size OBJC_DESIGNATED_INITIALIZER;
/// Initialize with custom frame.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initialize from storyboard.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set size and frame.
- (void)drawRect:(CGRect)rect;
/// Items open.
- (void)open;
/// Items close.
- (void)close;
/// Items open or close.
- (void)toggle;
/// Add custom item
- (void)addItemWithItem:(FloatyItem * _Nonnull)item;
/// Add item with title.
- (FloatyItem * _Nonnull)addItemWithTitle:(NSString * _Nonnull)title;
/// Add item with title and icon.
- (FloatyItem * _Nonnull)addItem:(NSString * _Nonnull)title icon:(UIImage * _Nullable)icon;
/// Add item with title and handler.
- (FloatyItem * _Nonnull)addItemWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nonnull)(FloatyItem * _Nonnull))handler;
/// Add item with title, icon or handler.
- (FloatyItem * _Nonnull)addItem:(NSString * _Nonnull)title icon:(UIImage * _Nullable)icon handler:(void (^ _Nonnull)(FloatyItem * _Nonnull))handler;
/// Add item with icon.
- (FloatyItem * _Nonnull)addItemWithIcon:(UIImage * _Nullable)icon;
/// Add item with icon and handler.
- (FloatyItem * _Nonnull)addItemWithIcon:(UIImage * _Nullable)icon handler:(void (^ _Nonnull)(FloatyItem * _Nonnull))handler;
/// Remove item.
- (void)removeItemWithItem:(FloatyItem * _Nonnull)item;
/// Remove item with index.
- (void)removeItemWithIndex:(NSInteger)index;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)didMoveToSuperview;
@end







typedef SWIFT_ENUM(NSInteger, FloatyAlignment) {
  FloatyAlignmentLeft = 0,
  FloatyAlignmentCenter = 1,
  FloatyAlignmentRight = 2,
};


/// Optional delegate that can be used to be notified whenever the user
/// taps on a FAB that does not contain any sub items.
SWIFT_PROTOCOL("_TtP9SMFNative14FloatyDelegate_")
@protocol FloatyDelegate
@optional
/// Indicates that the user has tapped on a FAB widget that does not
/// contain any defined sub items.
/// \param fab The FAB widget that was selected by the user.
///
- (void)emptyFloatySelected:(Floaty * _Nonnull)floaty;
- (void)floatyOpened:(Floaty * _Nonnull)floaty;
- (void)floatyClosed:(Floaty * _Nonnull)floaty;
@end


SWIFT_PROTOCOL("_TtP9SMFNative12FloatyExport_")
@protocol FloatyExport <JSExport>
@property (nonatomic, copy) NSArray<FloatyItem *> * _Nonnull items;
@property (nonatomic) CGFloat size;
@property (nonatomic) CGFloat paddingX;
@property (nonatomic) CGFloat paddingY;
@property (nonatomic) enum FloatyAlignment alignment;
@property (nonatomic) BOOL autoCloseOnTap;
@property (nonatomic) CGFloat rotationDegrees;
@property (nonatomic) double animationSpeed;
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
@property (nonatomic, strong) UIImage * _Nullable buttonImage;
@property (nonatomic, strong) UIColor * _Nonnull plusColor;
@property (nonatomic, strong) UIColor * _Nonnull overlayColor;
@property (nonatomic) CGFloat itemSpace;
@property (nonatomic) CGFloat itemSize;
@property (nonatomic, strong) UIColor * _Nonnull itemButtonColor;
@property (nonatomic, strong) UIColor * _Nonnull itemTitleColor;
@property (nonatomic, strong) UIColor * _Nullable itemImageColor;
@property (nonatomic, strong) UIColor * _Nonnull itemShadowColor;
@property (nonatomic) BOOL closed;
@property (nonatomic) enum FloatyOpenAnimationType openAnimationType;
@property (nonatomic) BOOL friendlyTap;
@property (nonatomic) BOOL sticky;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) FloatyManager * _Nonnull global;)
+ (FloatyManager * _Nonnull)global SWIFT_WARN_UNUSED_RESULT;
+ (void)setGlobal:(FloatyManager * _Nonnull)newValue;
@property (nonatomic, weak) id <FloatyDelegate> _Nullable fabDelegate;
- (void)open;
- (void)close;
- (void)toggle;
- (void)addItemWithItem:(FloatyItem * _Nonnull)item;
- (FloatyItem * _Nonnull)addItemWithTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
- (FloatyItem * _Nonnull)addItem:(NSString * _Nonnull)title icon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (FloatyItem * _Nonnull)addItemWithIcon:(UIImage * _Nullable)icon SWIFT_WARN_UNUSED_RESULT;
- (void)removeItemWithItem:(FloatyItem * _Nonnull)item;
- (void)removeItemWithIndex:(NSInteger)index;
@end

enum FloatyItemAlignment : NSInteger;
@class UILabel;
@class UIImageView;

/// Floating Action Button Object’s item.
SWIFT_CLASS("_TtC9SMFNative10FloatyItem")
@interface FloatyItem : UIView
/// This object’s button size.
@property (nonatomic) CGFloat size;
@property (nonatomic) enum FloatyItemAlignment alignment;
/// Button color.
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
/// Title label color.
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// Circle Shadow color.
@property (nonatomic, strong) UIColor * _Nonnull circleShadowColor;
/// Title Shadow color.
@property (nonatomic, strong) UIColor * _Nonnull titleShadowColor;
/// If you touch up inside button, it execute handler.
@property (nonatomic, copy) void (^ _Nullable handler)(FloatyItem * _Nonnull);
@property (nonatomic, strong) JSValue * _Nullable onSelected;
@property (nonatomic) CGPoint imageOffset;
@property (nonatomic) CGSize imageSize;
/// Reference to parent
@property (nonatomic, weak) Floaty * _Nullable actionButton;
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// Item’s title.
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconImageView;
/// Item’s icon.
@property (nonatomic, strong) UIImage * _Nullable icon;
/// Item’s icon tint color change
@property (nonatomic, strong) UIColor * _Null_unspecified iconTintColor;
/// itemBackgroundColor change
@property (nonatomic, strong) UIColor * _Nullable itemBackgroundColor;
/// Initialize with default property.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set size, frame and draw layers.
- (void)drawRect:(CGRect)rect;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



typedef SWIFT_ENUM(NSInteger, FloatyItemAlignment) {
  FloatyItemAlignmentLeft = 0,
  FloatyItemAlignmentRight = 1,
};


SWIFT_PROTOCOL("_TtP9SMFNative16FloatyItemExport_")
@protocol FloatyItemExport <JSExport>
@property (nonatomic) CGFloat size;
@property (nonatomic) enum FloatyItemAlignment alignment;
@property (nonatomic, strong) UIColor * _Nonnull buttonColor;
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
@property (nonatomic, strong) UIColor * _Nonnull circleShadowColor;
@property (nonatomic, strong) UIColor * _Nonnull titleShadowColor;
@property (nonatomic, strong) JSValue * _Nullable onSelected;
@property (nonatomic) CGPoint imageOffset;
@property (nonatomic) CGSize imageSize;
@property (nonatomic, weak) Floaty * _Nullable actionButton;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImageView * _Nonnull iconImageView;
@property (nonatomic, strong) UIImage * _Nullable icon;
@property (nonatomic, strong) UIColor * _Null_unspecified iconTintColor;
@property (nonatomic, strong) UIColor * _Nullable itemBackgroundColor;
@end


/// KCFloatingActionButton dependent on UIWindow.
SWIFT_CLASS("_TtC9SMFNative13FloatyManager")
@interface FloatyManager : NSObject
@property (nonatomic, readonly, strong) Floaty * _Nonnull button;
- (void)show:(BOOL)animated;
- (void)hide:(BOOL)animated;
- (void)toggle:(BOOL)animated;
@property (nonatomic, readonly) BOOL hidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FloatyOpenAnimationType) {
  FloatyOpenAnimationTypePop = 0,
  FloatyOpenAnimationTypeFade = 1,
  FloatyOpenAnimationTypeSlideLeft = 2,
  FloatyOpenAnimationTypeSlideUp = 3,
  FloatyOpenAnimationTypeSlideDown = 4,
  FloatyOpenAnimationTypeNone = 5,
};

@class NSBundle;

/// KCFloatingActionButton dependent on UIWindow.
SWIFT_CLASS("_TtC9SMFNative20FloatyViewController")
@interface FloatyViewController : UIViewController
- (void)viewDidLoad;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MGSwipeButton (SWIFT_EXTENSION(SMFNative)) <JSExport>
@end




SWIFT_PROTOCOL("_TtP9SMFNative17MKMapCameraExport_")
@protocol MKMapCameraExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic) CLLocationCoordinate2D centerCoordinate;
+ (MKMapCamera * _Nonnull)createCamera:(CLLocationCoordinate2D)centerCoordinate :(CLLocationCoordinate2D)eyeCoordinate :(CLLocationDistance)eyeAltitude SWIFT_WARN_UNUSED_RESULT;
@end


@interface MKMapView (SWIFT_EXTENSION(SMFNative))
@property (nonatomic, strong) NSDictionary * _Nullable centerLocation;
- (void)setCenter:(double)latitude :(double)longitude :(BOOL)animated;
@end


SWIFT_PROTOCOL("_TtP9SMFNative15MKMapViewExport_")
@protocol MKMapViewExport <JSExport>
@property (nonatomic) MKMapType mapType;
@property (nonatomic, getter=isZoomEnabled) BOOL zoomEnabled;
@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property (nonatomic, getter=isRotateEnabled) BOOL rotateEnabled;
@property (nonatomic) BOOL showsCompass;
- (void)setCamera:(MKMapCamera * _Nonnull)camera animated:(BOOL)animated;
- (void)setCenter:(double)latitude :(double)longitude :(BOOL)animated;
@property (nonatomic, strong) NSDictionary * _Nullable centerLocation;
@property (nonatomic, strong) JSValue * _Nullable mapViewFinishRender;
- (void)addAnnotations:(NSArray<id <MKAnnotation>> * _Nonnull)annotations;
- (void)addAnnotation:(id <MKAnnotation> _Nonnull)annotation;
- (void)removeAnnotation:(id <MKAnnotation> _Nonnull)annotation;
- (void)removeAnnotations:(NSArray<id <MKAnnotation>> * _Nonnull)annotations;
@property (nonatomic, readonly, copy) NSArray<id <MKAnnotation>> * _Nonnull annotations;
- (NSDictionary * _Nonnull)convertToCoordinateFromView:(CGPoint)point :(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL showsUserLocation;
@end




SWIFT_PROTOCOL("_TtP9SMFNative12NSDataExport_")
@protocol NSDataExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly) NSInteger length;
+ (NSData * _Nullable)base64Encoded:(NSString * _Nonnull)base64 SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)dataFromUTF8String:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toBase64 SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toUtf8 SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP9SMFNative13NSErrorExport_")
@protocol NSErrorExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull domain;
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull userInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedFailureReason;
@property (nonatomic, readonly, copy) NSString * _Nullable localizedRecoverySuggestion;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable localizedRecoveryOptions;
@property (nonatomic, readonly) id _Nullable recoveryAttempter;
@property (nonatomic, readonly, copy) NSString * _Nullable helpAnchor;
@end




SWIFT_PROTOCOL("_TtP9SMFNative14NSLocaleExport_")
@protocol NSLocaleExport <JSExport>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSLocale * _Nonnull current;)
+ (NSLocale * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
+ (NSLocale * _Nonnull)currentLocale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithLocaleIdentifier:(NSString * _Nonnull)string;
@end


@interface NSObject (SWIFT_EXTENSION(SMFNative))
- (NSString * _Nonnull)className SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP9SMFNative21NSTextContainerExport_")
@protocol NSTextContainerExport <JSExport>
@property (nonatomic) NSLineBreakMode lineBreakMode;
@property (nonatomic) NSInteger maximumNumberOfLines;
@end

@class UIPickerView;

SWIFT_CLASS("_TtC9SMFNative16PickerViewDialog")
@interface PickerViewDialog : UIView
@property (nonatomic, strong) UIPickerView * _Null_unspecified pickerView;
- (nonnull instancetype)initWithShowCancelButton:(BOOL)showCancelButton OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, ReachabilityStatus) {
  ReachabilityStatusNotReachable = 0,
  ReachabilityStatusReachableViaWWAN = 1,
  ReachabilityStatusReachableViaWiFi = 2,
};


SWIFT_PROTOCOL("_TtP9SMFNative13RequestExport_")
@protocol RequestExport <JSExport>
- (void)resume;
- (void)suspend;
- (void)cancel;
@end



@class AVAudioPCMBuffer;

SWIFT_PROTOCOL("_TtP9SMFNative43SFSpeechAudioBufferRecognitionRequestExport_")
@protocol SFSpeechAudioBufferRecognitionRequestExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, strong) AVAudioFormat * _Nonnull nativeAudioFormat;
- (void)append:(AVAudioPCMBuffer * _Nonnull)audioPCMBuffer;
- (void)appendBuffer:(AVAudioPCMBuffer * _Nonnull)audioPCMBuffer;
- (void)appendAudioSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
- (void)endAudio;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFSpeechRecognitionRequest (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end


SWIFT_PROTOCOL("_TtP9SMFNative32SFSpeechRecognitionRequestExport_")
@protocol SFSpeechRecognitionRequestExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic) SFSpeechRecognitionTaskHint taskHint;
@property (nonatomic) BOOL shouldReportPartialResults;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull contextualStrings;
@property (nonatomic, copy) NSString * _Nullable interactionIdentifier;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFSpeechRecognitionResult (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end

@class SFTranscription;

SWIFT_PROTOCOL("_TtP9SMFNative31SFSpeechRecognitionResultExport_")
@protocol SFSpeechRecognitionResultExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, strong) SFTranscription * _Nonnull bestTranscription;
@property (nonatomic, readonly, copy) NSArray<SFTranscription *> * _Nonnull transcriptions;
@property (nonatomic, readonly) BOOL isFinal;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFSpeechRecognitionTask (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end


SWIFT_PROTOCOL("_TtP9SMFNative37SFSpeechRecognitionTaskDelegateExport_")
@protocol SFSpeechRecognitionTaskDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionDidDetectSpeech;
@property (nonatomic, strong) JSValue * _Nullable didHypothesizeTranscription;
@property (nonatomic, strong) JSValue * _Nullable didFinishRecognition;
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionTaskFinishedReadingAudio;
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionTaskWasCancelled;
@property (nonatomic, strong) JSValue * _Nullable didFinishSuccessfully;
@end


SWIFT_PROTOCOL("_TtP9SMFNative29SFSpeechRecognitionTaskExport_")
@protocol SFSpeechRecognitionTaskExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly) SFSpeechRecognitionTaskState state;
@property (nonatomic, readonly) BOOL isFinishing;
- (void)finish;
@property (nonatomic, readonly) BOOL isCancelled;
- (void)cancel;
@property (nonatomic, readonly) NSError * _Nullable error;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFSpeechRecognizer (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end


SWIFT_PROTOCOL("_TtP9SMFNative32SFSpeechRecognizerDelegateExport_")
@protocol SFSpeechRecognizerDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable speechRecognizerAvailabilityDidChange;
@end

@protocol SFSpeechRecognizerDelegate;
@class NSOperationQueue;
@protocol SFSpeechRecognitionTaskDelegate;

SWIFT_PROTOCOL("_TtP9SMFNative24SFSpeechRecognizerExport_") SWIFT_AVAILABILITY(ios,introduced=10.0)
@protocol SFSpeechRecognizerExport <JSExport>
+ (NSSet<NSLocale *> * _Nonnull)supportedLocales SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSLocale *> * _Nonnull)supportedLocalesToArray SWIFT_WARN_UNUSED_RESULT;
+ (SFSpeechRecognizerAuthorizationStatus)authorizationStatus SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nullable instancetype)initWithLocale:(NSLocale * _Nonnull)locale;
@property (nonatomic, readonly) BOOL isAvailable;
@property (nonatomic, readonly, copy) NSLocale * _Nonnull locale;
@property (nonatomic, weak) id <SFSpeechRecognizerDelegate> _Nullable delegate;
@property (nonatomic) SFSpeechRecognitionTaskHint defaultTaskHint;
@property (nonatomic, strong) NSOperationQueue * _Nonnull queue;
+ (void)speechRequestAuthorization:(JSValue * _Nullable)handlerJS;
- (SFSpeechRecognitionTask * _Nonnull)recognitionTask:(SFSpeechRecognitionRequest * _Nonnull)recognitionRequest :(JSValue * _Nullable)handler SWIFT_WARN_UNUSED_RESULT;
- (SFSpeechRecognitionTask * _Nonnull)recognitionTaskWithDelegate:(SFSpeechRecognitionRequest * _Nonnull)recognitionRequest :(id <SFSpeechRecognitionTaskDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP9SMFNative35SFSpeechURLRecognitionRequestExport_")
@protocol SFSpeechURLRecognitionRequestExport <JSExport>
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)URL SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFTranscription (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end

@class SFTranscriptionSegment;

SWIFT_PROTOCOL("_TtP9SMFNative21SFTranscriptionExport_")
@protocol SFTranscriptionExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedString;
@property (nonatomic, readonly, copy) NSArray<SFTranscriptionSegment *> * _Nonnull segments;
@end


SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SFTranscriptionSegment (SWIFT_EXTENSION(SMFNative)) <NSObjectExport>
@end


SWIFT_PROTOCOL("_TtP9SMFNative28SFTranscriptionSegmentExport_")
@protocol SFTranscriptionSegmentExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull substring;
@property (nonatomic, readonly) NSRange substringRange;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) float confidence;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull alternativeSubstrings;
@end


SWIFT_PROTOCOL("_TtP9SMFNative31SMFAVPlayerViewControllerExport_")
@protocol SMFAVPlayerViewControllerExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) UIView * _Null_unspecified view;
@property (nonatomic, strong) AVPlayer * _Nullable player;
- (void)removeFromParentViewController;
@property (nonatomic) BOOL showsPlaybackControls;
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
- (void)addObserver;
- (void)removeObserver;
@property (nonatomic, strong) JSValue * _Nullable onReady;
@property (nonatomic, strong) JSValue * _Nullable AVPlayerItemDidPlayToEndTime;
@property (nonatomic, strong) JSValue * _Nullable viewDidAppear;
@property (nonatomic, strong) JSValue * _Nullable viewWillAppear;
@property (nonatomic, strong) JSValue * _Nullable viewDidDisappear;
@property (nonatomic, strong) JSValue * _Nullable viewWillDisappear;
@end


SWIFT_CLASS("_TtC9SMFNative25SMFAVPlayerViewController")
@interface SMFAVPlayerViewController : AVPlayerViewController <SMFAVPlayerViewControllerExport>
@property (nonatomic, strong) JSValue * _Nullable viewDidAppear;
@property (nonatomic, strong) JSValue * _Nullable viewWillAppear;
@property (nonatomic, strong) JSValue * _Nullable viewDidDisappear;
@property (nonatomic, strong) JSValue * _Nullable viewWillDisappear;
@property (nonatomic, strong) JSValue * _Nullable AVPlayerItemDidPlayToEndTime;
@property (nonatomic, strong) JSValue * _Nullable onReady;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)addObserver;
- (void)removeObserver;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class CLLocation;

SWIFT_CLASS("_TtC9SMFNative28SMFCLLocationManagerDelegate")
@interface SMFCLLocationManagerDelegate : NSObject <CLLocationManagerDelegate, CLLocationManagerDelegateExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) JSValue * _Nullable didUpdateLocations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@property (nonatomic, strong) JSValue * _Nullable didChangeAuthorizationStatus;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end

@class NSString;

SWIFT_PROTOCOL("_TtP9SMFNative17SMFDatabaseExport_")
@protocol SMFDatabaseExport <JSExport>
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path;
- (void)run:(NSString * _Nonnull)sql;
- (NSDictionary * _Nullable)prepare:(NSString * _Nonnull)sql SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable errorHandler;
@end


SWIFT_CLASS("_TtC9SMFNative11SMFDatabase")
@interface SMFDatabase : NSObject <SMFDatabaseExport>
@property (nonatomic, strong) JSValue * _Nullable errorHandler;
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
- (void)run:(NSString * _Nonnull)sql;
- (NSDictionary * _Nullable)prepare:(NSString * _Nonnull)sql SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP9SMFNative25SMFExtendedTextViewExport_")
@protocol SMFExtendedTextViewExport <JSExport>
@property (nonatomic, strong) JSValue * _Nullable didTapLinkWithURL;
@property (nonatomic, strong) JSValue * _Nullable didLongPressLinkWithURL;
@end

@class UIFont;

SWIFT_PROTOCOL("_TtP9SMFNative12UITextExport_")
@protocol UITextExport <JSExport>
@property (nonatomic) UIReturnKeyType returnKeyType;
@property (nonatomic, strong) JSValue * _Nullable onShowKeyboard;
@property (nonatomic, strong) JSValue * _Nullable onHideKeyboard;
- (void)addKeyboardObserver;
@property (nonatomic, strong) JSValue * _Nullable textBoxDelegate;
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) UIColor * _Nullable textColor;
@end

enum ScrollType : NSInteger;

SWIFT_PROTOCOL("_TtP9SMFNative18UIScrollViewExport_")
@protocol UIScrollViewExport <JSExport>
@property (nonatomic) BOOL showsHorizontalScrollIndicator;
@property (nonatomic) BOOL showsVerticalScrollIndicator;
@property (nonatomic) CGSize contentSize;
@property (nonatomic) CGFloat decelerationRate;
@property (nonatomic) CGPoint contentOffset;
- (void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;
@property (nonatomic, strong) JSValue * _Nullable onScrollBegin;
@property (nonatomic, strong) JSValue * _Nullable onScrollEnd;
@property (nonatomic, strong) JSValue * _Nullable didScroll;
@property (nonatomic, strong) JSValue * _Nullable onScrollBeginDecelerating;
@property (nonatomic, strong) JSValue * _Nullable onScrollEndDecelerating;
- (void)autoContentSize:(enum ScrollType)type;
- (void)scrollToBottom;
- (void)scrollToRight;
@end

@class NSTextContainer;

SWIFT_PROTOCOL("_TtP9SMFNative16UITextViewExport_")
@protocol UITextViewExport <UIScrollViewExport, UITextExport>
@property (nonatomic) NSInteger textAlignmentNumber;
@property (nonatomic, copy) NSString * _Nonnull htmlText;
@property (nonatomic) BOOL setSelectable;
@property (nonatomic) BOOL setEditable;
@property (nonatomic) BOOL setDelaysContentTouches;
@property (nonatomic, readonly, strong) NSTextContainer * _Nonnull textContainer;
@end




SWIFT_CLASS("_TtC9SMFNative13SMFUITextView")
@interface SMFUITextView : UITextView <UITextViewExport, UITextViewDelegate>
@property (nonatomic, strong) JSValue * _Nullable textBoxDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;

SWIFT_CLASS("_TtC9SMFNative19SMFExtendedTextView")
@interface SMFExtendedTextView : SMFUITextView <SMFExtendedTextViewExport>
@property (nonatomic, strong) JSValue * _Nullable didTapLinkWithURL;
@property (nonatomic, strong) JSValue * _Nullable didLongPressLinkWithURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP9SMFNative23SMFFloatyDelegateExport_")
@protocol SMFFloatyDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable emptyFloatySelected;
@property (nonatomic, strong) JSValue * _Nullable floatyOpened;
@property (nonatomic, strong) JSValue * _Nullable floatyClosed;
@end


SWIFT_CLASS("_TtC9SMFNative17SMFFloatyDelegate")
@interface SMFFloatyDelegate : NSObject <FloatyDelegate, SMFFloatyDelegateExport>
@property (nonatomic, strong) JSValue * _Nullable floatyClosed;
@property (nonatomic, strong) JSValue * _Nullable floatyOpened;
@property (nonatomic, strong) JSValue * _Nullable emptyFloatySelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emptyFloatySelected:(Floaty * _Nonnull)floaty;
- (void)floatyOpened:(Floaty * _Nonnull)floaty;
- (void)floatyClosed:(Floaty * _Nonnull)floaty;
@end


@class SMFRequest;

SWIFT_PROTOCOL("_TtP9SMFNative13SMFHttpExport_")
@protocol SMFHttpExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic) double timeoutIntervalForRequest;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable defaultHTTPHeaders;
- (void)cancelAll;
- (SMFRequest * _Nullable)requestFile:(NSString * _Nonnull)url :(NSString * _Nonnull)fileName :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestImage:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestString:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestJSON:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)request:(NSDictionary<NSString *, id> * _Nonnull)params :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)upload:(NSDictionary<NSString *, id> * _Nonnull)params :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9SMFNative7SMFHttp")
@interface SMFHttp : NSObject <SMFHttpExport>
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) double timeoutIntervalForRequest;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable defaultHTTPHeaders;
- (void)cancelAll;
- (SMFRequest * _Nullable)requestFile:(NSString * _Nonnull)url :(NSString * _Nonnull)fileName :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestImage:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestString:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)requestJSON:(NSString * _Nonnull)url :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)request:(NSDictionary<NSString *, id> * _Nonnull)params :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
- (SMFRequest * _Nullable)upload:(NSDictionary<NSString *, id> * _Nonnull)params :(JSValue * _Nullable)onLoad :(JSValue * _Nullable)onError SWIFT_WARN_UNUSED_RESULT;
@end


@class MKAnnotationView;

SWIFT_CLASS("_TtC9SMFNative12SMFMKMapView")
@interface SMFMKMapView : MKMapView <MKMapViewDelegate, MKMapViewExport>
@property (nonatomic, strong) JSValue * _Nullable mapViewFinishRender;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)convertToCoordinateFromView:(CGPoint)point :(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (MKAnnotationView * _Nullable)mapView:(MKMapView * _Nonnull)mapView viewForAnnotation:(id <MKAnnotation> _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (void)mapViewDidFinishRenderingMap:(MKMapView * _Nonnull)mapView fullyRendered:(BOOL)fullyRendered;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative28SMFQLPreviewControllerExport_")
@protocol SMFQLPreviewControllerExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull document;
@property (nonatomic, strong) UIColor * _Nullable barColor;
@property (nonatomic, strong) UIColor * _Nullable itemColor;
@property (nonatomic) BOOL statusBarHidden;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
- (void)setNeedsStatusBarAppearanceUpdate;
@end

@protocol QLPreviewItem;

SWIFT_CLASS("_TtC9SMFNative22SMFQLPreviewController")
@interface SMFQLPreviewController : QLPreviewController <QLPreviewControllerDataSource, SMFQLPreviewControllerExport>
@property (nonatomic, strong) UIColor * _Nullable itemColor;
@property (nonatomic, strong) UIColor * _Nullable barColor;
@property (nonatomic, copy) NSArray<NSURL *> * _Nonnull document;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic) BOOL statusBarHidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
- (id <QLPreviewItem> _Nonnull)previewController:(QLPreviewController * _Nonnull)controller previewItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC9SMFNative10SMFRequest")
@interface SMFRequest : NSObject <RequestExport>
- (void)cancel;
- (void)suspend;
- (void)resume;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC9SMFNative34SMFSFSpeechRecognitionTaskDelegate") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface SMFSFSpeechRecognitionTaskDelegate : NSObject <SFSpeechRecognitionTaskDelegateExport, SFSpeechRecognitionTaskDelegate>
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionDidDetectSpeech;
@property (nonatomic, strong) JSValue * _Nullable didHypothesizeTranscription;
@property (nonatomic, strong) JSValue * _Nullable didFinishRecognition;
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionTaskFinishedReadingAudio;
@property (nonatomic, strong) JSValue * _Nullable speechRecognitionTaskWasCancelled;
@property (nonatomic, strong) JSValue * _Nullable didFinishSuccessfully;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)speechRecognitionDidDetectSpeech:(SFSpeechRecognitionTask * _Nonnull)task;
- (void)speechRecognitionTask:(SFSpeechRecognitionTask * _Nonnull)task didHypothesizeTranscription:(SFTranscription * _Nonnull)transcription;
- (void)speechRecognitionTask:(SFSpeechRecognitionTask * _Nonnull)task didFinishRecognition:(SFSpeechRecognitionResult * _Nonnull)recognitionResult;
- (void)speechRecognitionTaskFinishedReadingAudio:(SFSpeechRecognitionTask * _Nonnull)task;
- (void)speechRecognitionTaskWasCancelled:(SFSpeechRecognitionTask * _Nonnull)task;
- (void)speechRecognitionTask:(SFSpeechRecognitionTask * _Nonnull)task didFinishSuccessfully:(BOOL)successfully;
@end


SWIFT_CLASS("_TtC9SMFNative29SMFSFSpeechRecognizerDelegate")
@interface SMFSFSpeechRecognizerDelegate : NSObject <SFSpeechRecognizerDelegateExport, SFSpeechRecognizerDelegate>
@property (nonatomic, strong) JSValue * _Nullable speechRecognizerAvailabilityDidChange;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)speechRecognizer:(SFSpeechRecognizer * _Nonnull)speechRecognizer availabilityDidChange:(BOOL)available SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


SWIFT_PROTOCOL("_TtP9SMFNative14SMFTimerExport_")
@protocol SMFTimerExport <JSExport>
- (nonnull instancetype)init;
- (void)scheduledTimer:(double)time :(JSValue * _Nonnull)function :(BOOL)repeats;
- (void)invalidate;
@end


SWIFT_CLASS("_TtC9SMFNative8SMFTimer")
@interface SMFTimer : NSObject <SMFTimerExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)scheduledTimer:(double)time :(JSValue * _Nonnull)function :(BOOL)repeats;
- (void)invalidate;
@end



SWIFT_PROTOCOL("_TtP9SMFNative17UIAlertViewExport_")
@protocol UIAlertViewExport <JSExport>
- (nonnull instancetype)initWithDelegate:(JSValue * _Nonnull)delegate;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nullable message;
- (NSInteger)addButtonWithTitle:(NSString * _Nullable)title SWIFT_WARN_UNUSED_RESULT;
- (void)show;
- (void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated;
@property (nonatomic, readonly) BOOL isVisible;
@end


SWIFT_CLASS("_TtC9SMFNative14SMFUIAlertView")
@interface SMFUIAlertView : UIAlertView <UIAlertViewExport, UIAlertViewDelegate>
- (nonnull instancetype)initWithDelegate:(JSValue * _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)alertView:(UIAlertView * _Nonnull)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative14UIButtonExport_")
@protocol UIButtonExport <JSExport>
- (void)setTitleColor:(UIColor * _Nonnull)color :(enum ButtonState)state;
- (void)setTitle:(NSString * _Nonnull)title :(enum ButtonState)state;
- (void)setBackgroundColor:(UIColor * _Nonnull)color :(enum ButtonState)state;
- (void)setBackgroundImage:(UIImage * _Nonnull)image :(enum ButtonState)state;
@property (nonatomic, readonly, strong) UILabel * _Nullable titleLabel;
@end


SWIFT_CLASS("_TtC9SMFNative11SMFUIButton")
@interface SMFUIButton : UIButton <UIButtonExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSDate;

SWIFT_PROTOCOL("_TtP9SMFNative21SMFUIDatePickerExport_")
@protocol SMFUIDatePickerExport <JSExport>
- (void)show;
@property (nonatomic, strong) JSValue * _Nullable onSelected;
@property (nonatomic, strong) NSDate * _Nullable minimumDate;
@property (nonatomic, strong) NSDate * _Nullable maximumDate;
@property (nonatomic, strong) NSDate * _Nonnull defaultDate;
@property (nonatomic) UIDatePickerMode datePickerMode;
@property (nonatomic) BOOL is24HourFormat;
@end


SWIFT_CLASS("_TtC9SMFNative15SMFUIDatePicker")
@interface SMFUIDatePicker : DatePickerDialog <SMFUIDatePickerExport>
@property (nonatomic) BOOL is24HourFormat;
@property (nonatomic) UIDatePickerMode datePickerMode;
@property (nonatomic, strong) NSDate * _Nullable maximumDate;
@property (nonatomic, strong) NSDate * _Nullable minimumDate;
@property (nonatomic, strong) NSDate * _Nonnull defaultDate;
@property (nonatomic, strong) JSValue * _Nullable onSelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)show;
- (nonnull instancetype)initWithShowCancelButton:(BOOL)showCancelButton SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP9SMFNative37UIImagePickerControllerDelegateExport_")
@protocol UIImagePickerControllerDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable didFinishPickingMediaWithInfo;
@property (nonatomic, strong) JSValue * _Nullable imagePickerControllerDidCancel;
@end

@class UIImagePickerController;

SWIFT_CLASS("_TtC9SMFNative34SMFUIImagePickerControllerDelegate")
@interface SMFUIImagePickerControllerDelegate : NSObject <UIImagePickerControllerDelegateExport, UIImagePickerControllerDelegate, UINavigationControllerDelegate>
@property (nonatomic, strong) JSValue * _Nullable imagePickerControllerDidCancel;
@property (nonatomic, strong) JSValue * _Nullable didFinishPickingMediaWithInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
@end


SWIFT_PROTOCOL("_TtP9SMFNative17UIImageViewExport_")
@protocol UIImageViewExport <JSExport>
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic) UIViewContentMode contentMode;
- (void)loadImage:(UIImage * _Nonnull)image;
- (void)loadFromURL:(NSURL * _Nonnull)url :(UIImage * _Nonnull)placeholder;
@end


SWIFT_CLASS("_TtC9SMFNative14SMFUIImageView")
@interface SMFUIImageView : UIImageView <UIImageViewExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadImage:(UIImage * _Nonnull)image;
- (void)loadFromURL:(NSURL * _Nonnull)url :(UIImage * _Nonnull)placeholder;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative34UILongPressGestureRecognizerExport_")
@protocol UILongPressGestureRecognizerExport <JSExport>
@property (nonatomic) NSInteger numberOfTapsRequired;
@property (nonatomic) NSInteger numberOfTouchesRequired;
@property (nonatomic) CFTimeInterval minimumPressDuration;
@property (nonatomic) CGFloat allowableMovement;
@end


SWIFT_PROTOCOL("_TtP9SMFNative25UIGestureRecognizerExport_")
@protocol UIGestureRecognizerExport <JSExport>
- (nonnull instancetype)init;
- (CGPoint)locationView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable handle;
@property (nonatomic, readonly) NSInteger gestureRecognizerstate;
@end


SWIFT_CLASS("_TtC9SMFNative31SMFUILongPressGestureRecognizer")
@interface SMFUILongPressGestureRecognizer : UILongPressGestureRecognizer <UIGestureRecognizerExport, UILongPressGestureRecognizerExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative36UINavigationControllerDelegateExport_")
@protocol UINavigationControllerDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable willShow;
@end

@class UINavigationController;

SWIFT_CLASS("_TtC9SMFNative33SMFUINavigationControllerDelegate")
@interface SMFUINavigationControllerDelegate : NSObject <UINavigationControllerDelegateExport, UINavigationControllerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) JSValue * _Nullable willShow;
- (void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC9SMFNative25SMFUIPickerViewDataSource")
@interface SMFUIPickerViewDataSource : NSObject <JSExport, UIPickerViewDataSource>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP9SMFNative26UIPickerViewDelegateExport_")
@protocol UIPickerViewDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable titleForRow;
@property (nonatomic, strong) JSValue * _Nullable didSelectRow;
@property (nonatomic, strong) JSValue * _Nullable rowHeight;
@end


SWIFT_CLASS("_TtC9SMFNative23SMFUIPickerViewDelegate")
@interface SMFUIPickerViewDelegate : NSObject <UIPickerViewDelegateExport, UIPickerViewDelegate>
@property (nonatomic, strong) JSValue * _Nullable rowHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) JSValue * _Nullable titleForRow;
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable didSelectRow;
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
- (CGFloat)pickerView:(UIPickerView * _Nonnull)pickerView rowHeightForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC9SMFNative15SMFUIScrollView")
@interface SMFUIScrollView : UIScrollView <UIScrollViewExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative25UISearchBarDelegateExport_")
@protocol UISearchBarDelegateExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, strong) JSValue * _Nullable textDidChange;
@property (nonatomic, strong) JSValue * _Nullable shouldChangeTextInReplacementText;
@property (nonatomic, strong) JSValue * _Nullable shouldBeginEditing;
@property (nonatomic, strong) JSValue * _Nullable didBeginEditing;
@property (nonatomic, strong) JSValue * _Nullable shouldEndEditing;
@property (nonatomic, strong) JSValue * _Nullable didEndEditing;
@property (nonatomic, strong) JSValue * _Nullable bookmarkButtonClicked;
@property (nonatomic, strong) JSValue * _Nullable cancelButtonClicked;
@property (nonatomic, strong) JSValue * _Nullable searchButtonClicked;
@property (nonatomic, strong) JSValue * _Nullable searchResultsListButtonClicked;
@property (nonatomic, strong) JSValue * _Nullable selectedScopeButtonIndexDidChange;
@end

@class UISearchBar;

SWIFT_CLASS("_TtC9SMFNative22SMFUISearchBarDelegate")
@interface SMFUISearchBarDelegate : NSObject <UISearchBarDelegateExport, UISearchBarDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// /////////////////////////////////////////////////////////////////////
@property (nonatomic, strong) JSValue * _Nullable textDidChange;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar textDidChange:(NSString * _Nonnull)searchText;
@property (nonatomic, strong) JSValue * _Nullable shouldChangeTextInReplacementText;
- (BOOL)searchBar:(UISearchBar * _Nonnull)searchBar shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable shouldBeginEditing;
- (BOOL)searchBarShouldBeginEditing:(UISearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable didBeginEditing;
- (void)searchBarTextDidBeginEditing:(UISearchBar * _Nonnull)searchBar;
@property (nonatomic, strong) JSValue * _Nullable shouldEndEditing;
- (BOOL)searchBarShouldEndEditing:(UISearchBar * _Nonnull)searchBar SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable didEndEditing;
- (void)searchBarTextDidEndEditing:(UISearchBar * _Nonnull)searchBar;
/// /////////////////////////////////////////////////////////////////////
@property (nonatomic, strong) JSValue * _Nullable bookmarkButtonClicked;
- (void)searchBarBookmarkButtonClicked:(UISearchBar * _Nonnull)searchBar;
@property (nonatomic, strong) JSValue * _Nullable cancelButtonClicked;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)searchBar;
@property (nonatomic, strong) JSValue * _Nullable searchButtonClicked;
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
@property (nonatomic, strong) JSValue * _Nullable searchResultsListButtonClicked;
- (void)searchBarResultsListButtonClicked:(UISearchBar * _Nonnull)searchBar;
/// /////////////////////////////////////////////////////////////////////
@property (nonatomic, strong) JSValue * _Nullable selectedScopeButtonIndexDidChange;
- (void)searchBar:(UISearchBar * _Nonnull)searchBar selectedScopeButtonIndexDidChange:(NSInteger)selectedScope;
@end

enum SliderState : NSInteger;

SWIFT_PROTOCOL("_TtP9SMFNative14UISliderExport_")
@protocol UISliderExport <JSExport>
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
- (void)setThumbImage:(UIImage * _Nonnull)image :(enum SliderState)state;
@property (nonatomic, strong) UIColor * _Nullable minimumTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor;
@property (nonatomic) float value;
@property (nonatomic) float minimumValue;
@property (nonatomic) float maximumValue;
- (void)setValue:(float)value animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC9SMFNative11SMFUISlider")
@interface SMFUISlider : UISlider <UISliderExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UITableViewRowAction;

SWIFT_PROTOCOL("_TtP9SMFNative17UITableViewExport_")
@protocol UITableViewExport <UIScrollViewExport>
@property (nonatomic, strong) JSValue * _Nullable cellForRowAt;
@property (nonatomic, strong) JSValue * _Nullable didSelectRowAt;
@property (nonatomic, strong) JSValue * _Nullable itemCount;
@property (nonatomic, strong) JSValue * _Nullable tableRowHeight;
@property (nonatomic, strong) JSValue * _Nullable onRowCreate;
- (void)reloadData;
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nullable indexPathsForVisibleRows;
- (NSArray<NSNumber *> * _Nonnull)getVisibleIndexArray SWIFT_WARN_UNUSED_RESULT;
- (void)scrollTo:(NSInteger)index;
@property (nonatomic, copy) NSArray<UITableViewRowAction *> * _Nonnull rowActions;
@property (nonatomic) UITableViewCellSeparatorStyle separatorStyle;
- (void)deleteRowIndexAnimation:(NSInteger)index :(UITableViewRowAnimation)animation;
@property (nonatomic) double expansionSettingsThreshold;
@property (nonatomic) BOOL expansionSettingsfillOnTrigger;
@property (nonatomic, strong) JSValue * _Nullable onRowSwiped;
@property (nonatomic) BOOL leftToRightSwipeEnabled;
@property (nonatomic) BOOL rightToLeftSwipeEnabled;
@property (nonatomic, strong) JSValue * _Nullable heightForRowAtIndex;
@end

@class UITableViewCell;
@class MGSwipeTableCell;
@class MGSwipeSettings;
@class MGSwipeExpansionSettings;

SWIFT_CLASS("_TtC9SMFNative14SMFUITableView")
@interface SMFUITableView : UITableView <MGSwipeTableCellDelegate, UITableViewExport, UITableViewDataSource, UITableViewDelegate>
@property (nonatomic, strong) JSValue * _Nullable heightForRowAtIndex;
@property (nonatomic, strong) JSValue * _Nullable onRowSwiped;
@property (nonatomic) double expansionSettingsThreshold;
@property (nonatomic) BOOL expansionSettingsfillOnTrigger;
@property (nonatomic) BOOL leftToRightSwipeEnabled;
@property (nonatomic) BOOL rightToLeftSwipeEnabled;
@property (nonatomic, copy) NSArray<UITableViewRowAction *> * _Nonnull rowActions;
@property (nonatomic, strong) JSValue * _Nullable onRowCreate;
@property (nonatomic, strong) JSValue * _Nullable tableRowHeight;
@property (nonatomic, strong) JSValue * _Nullable itemCount;
@property (nonatomic, strong) JSValue * _Nullable didSelectRowAt;
@property (nonatomic, strong) JSValue * _Nullable cellForRowAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSArray<NSNumber *> * _Nonnull)getVisibleIndexArray SWIFT_WARN_UNUSED_RESULT;
- (void)scrollTo:(NSInteger)index;
- (BOOL)swipeTableCell:(MGSwipeTableCell * _Nonnull)cell canSwipe:(MGSwipeDirection)direction SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UIView *> * _Nullable)swipeTableCell:(MGSwipeTableCell * _Nonnull)cell swipeButtonsForDirection:(MGSwipeDirection)direction swipeSettings:(MGSwipeSettings * _Nonnull)swipeSettings expansionSettings:(MGSwipeExpansionSettings * _Nonnull)expansionSettings SWIFT_WARN_UNUSED_RESULT;
- (void)deleteRowIndexAnimation:(NSInteger)index :(UITableViewRowAnimation)animation;
- (void)layoutSubviews;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@property (nonatomic) CGFloat tableViewWidth;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative21UITableViewCellExport_")
@protocol UITableViewCellExport <JSExport>
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier;
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
@property (nonatomic) UITableViewCellSelectionStyle selectionStyle;
@end


SWIFT_CLASS("_TtC9SMFNative18SMFUITableViewCell")
@interface SMFUITableViewCell : MGSwipeTableCell <UITableViewCellExport>
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP9SMFNative28UITapGestureRecognizerExport_")
@protocol UITapGestureRecognizerExport <JSExport>
@property (nonatomic) NSInteger numberOfTapsRequired;
@property (nonatomic) NSInteger numberOfTouchesRequired;
@end


SWIFT_CLASS("_TtC9SMFNative25SMFUITapGestureRecognizer")
@interface SMFUITapGestureRecognizer : UITapGestureRecognizer <UIGestureRecognizerExport, UITapGestureRecognizerExport>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP9SMFNative17UITextFieldExport_")
@protocol UITextFieldExport <UITextExport>
@property (nonatomic, copy) NSString * _Nullable placeholder;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) CGFloat minimumFontSize;
@property (nonatomic) UITextFieldViewMode clearButtonMode;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic) BOOL isSecure;
@end


SWIFT_CLASS("_TtC9SMFNative14SMFUITextField")
@interface SMFUITextField : UITextField <UITextFieldExport, UITextFieldDelegate>
@property (nonatomic, strong) JSValue * _Nullable textBoxDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class UIWindow;

SWIFT_CLASS("_TtC9SMFNative9SMFUIView")
@interface SMFUIView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didAddSubview:(UIView * _Nonnull)subview;
- (void)willRemoveSubview:(UIView * _Nonnull)subview;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)didMoveToSuperview;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIPanGestureRecognizer;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC9SMFNative19SMFUIViewController")
@interface SMFUIViewController : UIViewController
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull orientations;
@property (nonatomic, strong) UIPanGestureRecognizer * _Nullable sliderDrawerGesture;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@property (nonatomic) BOOL statusBarHidden;
@property (nonatomic, strong) JSValue * _Nullable onViewLoad;
- (void)loadView;
@property (nonatomic, strong) JSValue * _Nullable onShow;
- (void)viewWillAppear:(BOOL)animated;
@property (nonatomic, strong) JSValue * _Nullable onViewDidAppear;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic, strong) JSValue * _Nullable onLoad;
- (void)viewDidLoad;
@property (nonatomic, strong) JSValue * _Nullable onHide;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, strong) JSValue * _Nullable onViewLayoutSubviews;
- (void)viewWillLayoutSubviews;
@property (nonatomic, strong) JSValue * _Nullable currentPage;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, strong) JSValue * _Nullable viewWillTransition;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLRequest;
@class WKNavigation;

SWIFT_PROTOCOL("_TtP9SMFNative18SMFWKWebViewExport_")
@protocol SMFWKWebViewExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollView;
- (void)load:(NSURLRequest * _Nonnull)request;
@property (nonatomic, strong) JSValue * _Nullable onLoad;
@property (nonatomic, strong) JSValue * _Nullable onError;
@property (nonatomic, strong) JSValue * _Nullable onShow;
- (WKNavigation * _Nullable)reload SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL canGoBack;
@property (nonatomic, readonly) BOOL canGoForward;
- (WKNavigation * _Nullable)goBack SWIFT_WARN_UNUSED_RESULT;
- (WKNavigation * _Nullable)goForward SWIFT_WARN_UNUSED_RESULT;
- (WKNavigation * _Nullable)loadHTMLString:(NSString * _Nonnull)string baseURL:(NSURL * _Nullable)baseURL SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable onChangedURL;
- (void)evaluateJavaScript:(NSString * _Nonnull)javascript :(JSValue * _Nonnull)callback;
@property (nonatomic) BOOL zoomEnabled;
@property (nonatomic) BOOL openLinkInside;
- (void)loadFileURL:(NSURL * _Nonnull)url :(NSURL * _Nonnull)readAccess;
@end

@class WKNavigationAction;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC9SMFNative12SMFWKWebView")
@interface SMFWKWebView : WKWebView <SMFWKWebViewExport, UIScrollViewDelegate, WKNavigationDelegate>
@property (nonatomic, strong) JSValue * _Nullable onChangedURL;
@property (nonatomic, strong) JSValue * _Nullable onShow;
@property (nonatomic, strong) JSValue * _Nullable onError;
@property (nonatomic, strong) JSValue * _Nullable onLoad;
@property (nonatomic) BOOL zoomEnabled;
@property (nonatomic) BOOL openLinkInside;
- (void)loadFileURL:(NSURL * _Nonnull)url :(NSURL * _Nonnull)readAccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)load:(NSURLRequest * _Nonnull)request;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didStartProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)evaluateJavaScript:(NSString * _Nonnull)javascript :(JSValue * _Nonnull)callback;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM(NSInteger, ScrollType) {
  ScrollTypeVertical = 0,
  ScrollTypeHorizontal = 1,
};

typedef SWIFT_ENUM(NSInteger, SliderState) {
  SliderStateNormal = 0,
  SliderStateDisabled = 1,
  SliderStateSelected = 2,
  SliderStatePressed = 3,
  SliderStateFocused = 4,
};


SWIFT_PROTOCOL("_TtP9SMFNative25UIActivityIndicatorExport_")
@protocol UIActivityIndicatorExport <JSExport>
- (nonnull instancetype)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style;
- (void)startAnimating;
- (void)stopAnimating;
@property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
@property (nonatomic, strong) UIColor * _Nullable color;
@end





@class UIActivity;

SWIFT_PROTOCOL("_TtP9SMFNative30UIActivityViewControllerExport_")
@protocol UIActivityViewControllerExport <JSExport>
- (nonnull instancetype)initWithActivityItems:(NSArray * _Nonnull)activityItems applicationActivities:(NSArray<UIActivity *> * _Nullable)applicationActivities;
@property (nonatomic, copy) NSArray<UIActivityType> * _Nullable excludedActivityTypes;
@end




SWIFT_PROTOCOL("_TtP9SMFNative19UIAlertActionExport_")
@protocol UIAlertActionExport <JSExport>
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) UIAlertActionStyle style;
@property (nonatomic) BOOL isEnabled;
+ (UIAlertAction * _Nonnull)createAction:(NSString * _Nonnull)title :(UIAlertActionStyle)style :(JSValue * _Nonnull)action SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP9SMFNative23UIAlertControllerExport_")
@protocol UIAlertControllerExport <JSExport>
+ (UIAlertController * _Nonnull)createAlertController:(UIAlertControllerStyle)style SWIFT_WARN_UNUSED_RESULT;
- (void)addAction:(UIAlertAction * _Nonnull)action;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable message;
@end





SWIFT_PROTOCOL("_TtP9SMFNative21UIBarButtonItemExport_")
@protocol UIBarButtonItemExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, getter=isEnabled) BOOL enabled;
- (void)addJSAction:(JSValue * _Nonnull)action;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
@end


@interface UIButton (SWIFT_EXTENSION(SMFNative))
- (void)setTitleColor:(UIColor * _Nonnull)color :(enum ButtonState)state;
- (void)setTitle:(NSString * _Nonnull)title :(enum ButtonState)state;
- (void)setBackgroundColor:(UIColor * _Nonnull)color :(enum ButtonState)state;
- (void)setBackgroundImage:(UIImage * _Nonnull)image :(enum ButtonState)state;
@end





SWIFT_PROTOCOL("_TtP9SMFNative13UIColorExport_")
@protocol UIColorExport <JSExport>
- (nonnull instancetype)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=blackColor) UIColor * _Nonnull black;)
+ (UIColor * _Nonnull)blackColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=darkGrayColor) UIColor * _Nonnull darkGray;)
+ (UIColor * _Nonnull)darkGrayColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=lightGrayColor) UIColor * _Nonnull lightGray;)
+ (UIColor * _Nonnull)lightGrayColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=whiteColor) UIColor * _Nonnull white;)
+ (UIColor * _Nonnull)whiteColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=grayColor) UIColor * _Nonnull gray;)
+ (UIColor * _Nonnull)grayColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=redColor) UIColor * _Nonnull red;)
+ (UIColor * _Nonnull)redColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=greenColor) UIColor * _Nonnull green;)
+ (UIColor * _Nonnull)greenColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=blueColor) UIColor * _Nonnull blue;)
+ (UIColor * _Nonnull)blueColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=cyanColor) UIColor * _Nonnull cyan;)
+ (UIColor * _Nonnull)cyanColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=yellowColor) UIColor * _Nonnull yellow;)
+ (UIColor * _Nonnull)yellowColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=magentaColor) UIColor * _Nonnull magenta;)
+ (UIColor * _Nonnull)magentaColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=orangeColor) UIColor * _Nonnull orange;)
+ (UIColor * _Nonnull)orangeColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=purpleColor) UIColor * _Nonnull purple;)
+ (UIColor * _Nonnull)purpleColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=brownColor) UIColor * _Nonnull brown;)
+ (UIColor * _Nonnull)brownColor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=clearColor) UIColor * _Nonnull clear;)
+ (UIColor * _Nonnull)clearColor SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)hexColor:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary * _Nonnull)components SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_PROTOCOL("_TtP9SMFNative15UIControlExport_")
@protocol UIControlExport <JSExport>
@property (nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment;
@property (nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment;
- (void)addJSTarget:(JSValue * _Nonnull)action :(enum ControlEvent)controlEvent;
@property (nonatomic) BOOL setEnabled;
@end




SWIFT_PROTOCOL("_TtP9SMFNative14UIDeviceExport_")
@protocol UIDeviceExport <JSExport>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull model;
@property (nonatomic, readonly, copy) NSString * _Nonnull systemVersion;
+ (UIDevice * _Nonnull)currentDevice SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) UIDeviceOrientation orientation;
+ (BOOL)forceTouchAvaliable SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nonnull)takeSnapShot SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable UUID;
@property (nonatomic, readonly) float batteryLevel;
@property (nonatomic) BOOL batteryMonitoringEnabled;
@property (nonatomic, readonly) UIDeviceBatteryState batteryState;
+ (void)vibrate;
+ (enum ReachabilityStatus)currentReachabilityStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)getIFAddresses SWIFT_WARN_UNUSED_RESULT;
+ (void)changeOrientation:(UIInterfaceOrientation)orientation;
@end


@interface UIFont (SWIFT_EXTENSION(SMFNative))
+ (UIFont * _Nonnull)createFromFileWithFilenameString:(NSString * _Nonnull)filenameString size:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP9SMFNative12UIFontExport_")
@protocol UIFontExport <JSExport>
+ (UIFont * _Nonnull)fontWithName:(NSString * _Nonnull)name size:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)systemFontOfSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)boldSystemFontOfSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)italicSystemFontOfSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
+ (UIFont * _Nonnull)createFromFileWithFilenameString:(NSString * _Nonnull)filenameString size:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)bold SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)italic SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)boldItalic SWIFT_WARN_UNUSED_RESULT;
- (CGSize)sizeOfString:(NSString * _Nonnull)string :(double)constrainedToWidth SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(SMFNative))
- (CGPoint)locationView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) JSValue * _Nullable handle;
@property (nonatomic, readonly) NSInteger gestureRecognizerstate;
@end



@interface UIImage (SWIFT_EXTENSION(SMFNative))
- (nullable instancetype)initWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


SWIFT_PROTOCOL("_TtP9SMFNative13UIImageExport_")
@protocol UIImageExport <JSExport>
- (nullable instancetype)initWithContentsOfFile:(NSString * _Nonnull)path;
+ (UIImage * _Nonnull)createNSData:(NSData * _Nonnull)nsdata SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nonnull)createName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize size;
- (UIImage * _Nonnull)resizeImage:(CGSize)targetSize SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)cropToBounds:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)imageRotatedByDegrees:(CGFloat)degrees :(BOOL)flip SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)compress:(NSInteger)format :(double)quality SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)convertToData SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP9SMFNative29UIImagePickerControllerExport_")
@protocol UIImagePickerControllerExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic) UIImagePickerControllerSourceType sourceType;
@property (nonatomic) BOOL allowsEditing;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull mediaTypes;
@property (nonatomic, weak) id <UIImagePickerControllerDelegate, UINavigationControllerDelegate> _Nullable delegate;
@end





SWIFT_PROTOCOL("_TtP9SMFNative13UILabelExport_")
@protocol UILabelExport <JSExport>
@property (nonatomic, strong) UIFont * _Null_unspecified font;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
@end





SWIFT_PROTOCOL("_TtP9SMFNative21UINavigationBarExport_")
@protocol UINavigationBarExport <JSExport>
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@property (nonatomic, strong) UIColor * _Nullable barTintColor;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable titleTextAttributes;
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
@property (nonatomic) BOOL hidesBackButton;
@end


@interface UINavigationController (SWIFT_EXTENSION(SMFNative))
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@end



SWIFT_PROTOCOL("_TtP9SMFNative28UINavigationControllerExport_")
@protocol UINavigationControllerExport <JSExport>
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (UIViewController * _Nullable)popViewControllerWithAnimated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
- (void)setTranslucent:(BOOL)translucent;
- (void)pop:(BOOL)animated;
- (void)popToRoot:(BOOL)animated;
- (void)popToPage:(UIViewController * _Nonnull)page :(BOOL)animated;
@property (nonatomic, readonly, strong) UINavigationBar * _Nonnull navigationBar;
- (void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
@property (nonatomic, strong) id <UINavigationControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) UIViewController * _Nullable topViewController;
@end


SWIFT_PROTOCOL("_TtP9SMFNative22UINavigationItemExport_")
@protocol UINavigationItemExport <JSExport>
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable prompt;
@property (nonatomic, strong) UIBarButtonItem * _Nullable backBarButtonItem;
@property (nonatomic) BOOL hidesBackButton;
- (void)setHidesBackButton:(BOOL)hidesBackButton animated:(BOOL)animated;
@property (nonatomic) BOOL leftItemsSupplementBackButton;
@property (nonatomic, strong) UIView * _Nullable titleView;
@property (nonatomic, copy) NSArray<UIBarButtonItem *> * _Nullable leftBarButtonItems;
@property (nonatomic, strong) UIBarButtonItem * _Nullable leftBarButtonItem;
@property (nonatomic, copy) NSArray<UIBarButtonItem *> * _Nullable rightBarButtonItems;
@property (nonatomic, strong) UIBarButtonItem * _Nullable rightBarButtonItem;
- (void)setLeftBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated;
- (void)setLeftBarButton:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
- (void)setRightBarButtonItems:(NSArray<UIBarButtonItem *> * _Nullable)items animated:(BOOL)animated;
- (void)setRightBarButton:(UIBarButtonItem * _Nullable)item animated:(BOOL)animated;
@end




SWIFT_PROTOCOL("_TtP9SMFNative18UIPasteboardExport_")
@protocol UIPasteboardExport <JSExport>
+ (UIPasteboard * _Nonnull)generalPasteboard SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable string;
@end





SWIFT_PROTOCOL("_TtP9SMFNative18UIPickerViewExport_")
@protocol UIPickerViewExport <JSExport>
@property (nonatomic, weak) id <UIPickerViewDataSource> _Nullable dataSource;
@property (nonatomic, weak) id <UIPickerViewDelegate> _Nullable delegate;
@property (nonatomic) BOOL showsSelectionIndicator;
@property (nonatomic, readonly) NSInteger numberOfComponents;
- (NSInteger)numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (CGSize)rowSizeForComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)reloadAllComponents;
- (void)reloadComponent:(NSInteger)component;
- (void)selectRow:(NSInteger)row inComponent:(NSInteger)component animated:(BOOL)animated;
- (NSInteger)selectedRowInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
- (void)show:(UIPickerView * _Nonnull)picker :(JSValue * _Nonnull)cancel :(JSValue * _Nonnull)ok;
@end




SWIFT_PROTOCOL("_TtP9SMFNative22UIRefreshControlExport_")
@protocol UIRefreshControlExport <JSExport>
- (void)endRefreshing;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
@end




SWIFT_PROTOCOL("_TtP9SMFNative17UIResponderExport_")
@protocol UIResponderExport <JSExport>
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIScrollView (SWIFT_EXTENSION(SMFNative)) <UIScrollViewDelegate>
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@interface UIScrollView (SWIFT_EXTENSION(SMFNative))
- (void)scrollToRight;
- (void)scrollToBottom;
- (void)autoContentSize:(enum ScrollType)type;
@property (nonatomic, strong) JSValue * _Nullable onScrollBegin;
@property (nonatomic, strong) JSValue * _Nullable onScrollEnd;
@property (nonatomic, strong) JSValue * _Nullable onScrollBeginDecelerating;
@property (nonatomic, strong) JSValue * _Nullable onScrollEndDecelerating;
@property (nonatomic, strong) JSValue * _Nullable didScroll;
@end





@class UITextInputAssistantItem;

SWIFT_PROTOCOL("_TtP9SMFNative17UISearchBarExport_")
@protocol UISearchBarExport <JSExport>
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, strong) UIColor * _Nullable textColor;
@property (nonatomic, copy) NSString * _Nullable prompt;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@property (nonatomic) UIBarStyle barStyle;
@property (nonatomic, strong) UIColor * _Nullable barTintColor;
@property (nonatomic) UISearchBarStyle searchBarStyle;
@property (nonatomic) BOOL isTranslucent;
@property (nonatomic, readonly, strong) UITextInputAssistantItem * _Nonnull inputAssistantItem;
@property (nonatomic) BOOL showsBookmarkButton;
@property (nonatomic) BOOL showsCancelButton;
- (void)setShowsCancelButton:(BOOL)showsCancelButton animated:(BOOL)animated;
@property (nonatomic) BOOL showsSearchResultsButton;
@property (nonatomic) BOOL isSearchResultsButtonSelected;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopeButtonTitles;
@property (nonatomic) NSInteger selectedScopeButtonIndex;
@property (nonatomic) BOOL showsScopeBar;
@property (nonatomic, weak) id <UISearchBarDelegate> _Nullable delegate;
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
- (UIImage * _Nullable)backgroundImageFor:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics SWIFT_WARN_UNUSED_RESULT;
- (void)setBackgroundImage:(UIImage * _Nullable)backgroundImage for:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics;
- (UIImage * _Nullable)imageFor:(UISearchBarIcon)icon state:(UIControlState)state SWIFT_WARN_UNUSED_RESULT;
- (void)setImage:(UIImage * _Nullable)iconImage for:(UISearchBarIcon)icon state:(UIControlState)state;
- (void)setIconImage:(UIImage * _Nonnull)image :(UISearchBarIcon)icon :(NSUInteger)state;
- (UIOffset)positionAdjustmentFor:(UISearchBarIcon)icon SWIFT_WARN_UNUSED_RESULT;
- (void)setPositionAdjustment:(UIOffset)adjustment for:(UISearchBarIcon)icon;
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
@property (nonatomic, strong) UIImage * _Nullable scopeBarBackgroundImage;
- (UIImage * _Nullable)scopeBarButtonBackgroundImageFor:(UIControlState)state SWIFT_WARN_UNUSED_RESULT;
- (void)setScopeBarButtonBackgroundImage:(UIImage * _Nullable)backgroundImage for:(UIControlState)state;
- (UIImage * _Nullable)scopeBarButtonDividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState SWIFT_WARN_UNUSED_RESULT;
- (void)setScopeBarButtonDividerImage:(UIImage * _Nullable)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState;
- (NSDictionary<NSString *, id> * _Nullable)scopeBarButtonTitleTextAttributesFor:(UIControlState)state SWIFT_WARN_UNUSED_RESULT;
- (void)setScopeBarButtonTitleTextAttributes:(NSDictionary<NSString *, id> * _Nullable)attributes for:(UIControlState)state;
- (UIImage * _Nullable)searchFieldBackgroundImageFor:(UIControlState)state SWIFT_WARN_UNUSED_RESULT;
- (void)setSearchFieldBackgroundImage:(UIImage * _Nullable)backgroundImage for:(UIControlState)state;
@property (nonatomic) UIOffset searchFieldBackgroundPositionAdjustment;
@property (nonatomic) UIOffset searchTextPositionAdjustment;
- (void)setSearchFieldBackgroundImage:(UIImage * _Nonnull)image :(UIControlState)state;
@end


@interface UISlider (SWIFT_EXTENSION(SMFNative))
- (void)setThumbImage:(UIImage * _Nonnull)image :(enum SliderState)state;
@end





SWIFT_PROTOCOL("_TtP9SMFNative14UISwitchExport_")
@protocol UISwitchExport <JSExport>
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
@property (nonatomic, strong) UIColor * _Nullable onTintColor;
@property (nonatomic, readonly) BOOL isOn;
- (void)setOn:(BOOL)on animated:(BOOL)animated;
@end






@interface UITabBarController (SWIFT_EXTENSION(SMFNative))
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@end


SWIFT_PROTOCOL("_TtP9SMFNative24UITabBarControllerExport_")
@protocol UITabBarControllerExport <JSExport>
@property (nonatomic, readonly, strong) UITabBar * _Nonnull tabBar;
@end


SWIFT_PROTOCOL("_TtP9SMFNative14UITabBarExport_")
@protocol UITabBarExport <JSExport>
@property (nonatomic) UIBarStyle barStyle;
@end






SWIFT_PROTOCOL("_TtP9SMFNative26UITableViewRowActionExport_")
@protocol UITableViewRowActionExport <JSExport>
+ (UITableViewRowAction * _Nonnull)create:(NSString * _Nonnull)title :(JSValue * _Nonnull)jsAction SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@end




SWIFT_PROTOCOL("_TtP9SMFNative22UITextFieldClassExport_")
@protocol UITextFieldClassExport <JSExport>
@property (nonatomic, strong) JSValue * _Nullable onShowKeyboard;
@property (nonatomic, strong) JSValue * _Nullable onHideKeyboard;
- (void)addKeyboardObserver;
@end


@interface UITextField (SWIFT_EXTENSION(SMFNative)) <UITextFieldClassExport>
@property (nonatomic, strong) JSValue * _Nullable onShowKeyboard;
@property (nonatomic, strong) JSValue * _Nullable onHideKeyboard;
- (void)addKeyboardObserver;
@property (nonatomic) BOOL isSecure;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end




@interface UITextView (SWIFT_EXTENSION(SMFNative))
@property (nonatomic) BOOL setSelectable;
@property (nonatomic) BOOL setEditable;
@property (nonatomic) BOOL setDelaysContentTouches;
@property (nonatomic) NSInteger textAlignmentNumber;
@property (nonatomic) CGSize contentSize;
@property (nonatomic) CGRect frame;
@property (nonatomic, copy) NSString * _Nonnull htmlText;
@property (nonatomic, strong) JSValue * _Nullable onShowKeyboard;
@property (nonatomic, strong) JSValue * _Nullable onHideKeyboard;
- (void)addKeyboardObserver;
@end






@class NSMutableDictionary;

@interface UIView (SWIFT_EXTENSION(SMFNative))
+ (void)animation:(NSTimeInterval)duration :(NSTimeInterval)delay :(JSValue * _Nonnull)animation :(JSValue * _Nonnull)completion;
@property (nonatomic) BOOL visible;
@property (nonatomic, strong) NSMutableDictionary * _Nullable notificationArray;
@property (nonatomic, strong) CAGradientLayer * _Nullable gradientLayer;
@property (nonatomic, strong) JSValue * _Nullable frameObserveHandler;
@property (nonatomic) BOOL touchEnabled;
- (void)setAllAutoresizingMask;
@property (nonatomic, strong) JSValue * _Nullable onTouch;
@property (nonatomic, strong) JSValue * _Nullable onTouchEnded;
@property (nonatomic, strong) JSValue * _Nullable didMoveToWindowHandler;
@property (nonatomic, strong) JSValue * _Nullable didMoveToSuperviewHandler;
@property (nonatomic, strong) JSValue * _Nullable willRemoveSubview;
@property (nonatomic, strong) JSValue * _Nullable willMoveToSuperView;
@property (nonatomic, strong) JSValue * _Nullable willMoveToWindow;
@property (nonatomic, strong) JSValue * _Nullable didAddSubview;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (UIViewController * _Nullable)parentViewController SWIFT_WARN_UNUSED_RESULT;
- (void)addObserver:(JSValue * _Nonnull)function :(NSNotificationName _Nonnull)aname;
- (void)removeObserver:(NSNotificationName _Nonnull)aname;
- (void)addFrameObserver;
- (void)removeFrameObserver;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


@interface UIViewController (SWIFT_EXTENSION(SMFNative))
- (void)presentViewController:(UIViewController * _Nonnull)viewcontroller;
- (void)dismissViewController;
@end

@class UINavigationItem;
@class UITabBarItem;

SWIFT_PROTOCOL("_TtP9SMFNative22UIViewControllerExport_")
@protocol UIViewControllerExport <JSExport>
- (nonnull instancetype)init;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<UIViewController *> * _Nonnull childViewControllers;
- (void)addChildViewController:(UIViewController * _Nonnull)childController;
- (void)removeFromParentViewController;
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@property (nonatomic, strong) UIView * _Null_unspecified view;
@property (nonatomic, readonly, strong) UINavigationController * _Nullable navigationController;
@property (nonatomic, readonly, strong) UITabBarController * _Nullable tabBarController;
@property (nonatomic, strong) JSValue * _Nullable onShow;
- (void)viewWillAppear:(BOOL)animated;
@property (nonatomic, strong) JSValue * _Nullable onHide;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, strong) JSValue * _Nullable onLoad;
- (void)viewDidLoad;
@property (nonatomic, strong) JSValue * _Nullable onViewLoad;
@property (nonatomic, strong) JSValue * _Nullable onViewLayoutSubviews;
@property (nonatomic, strong) JSValue * _Nullable onViewDidAppear;
- (void)viewDidAppear:(BOOL)animated;
@property (nonatomic) BOOL statusBarHidden;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
- (void)setNeedsStatusBarAppearanceUpdate;
@property (nonatomic, readonly, strong) UINavigationItem * _Nonnull navigationItem;
@property (nonatomic, strong) UITabBarItem * _Null_unspecified tabBarItem;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIPanGestureRecognizer * _Nullable sliderDrawerGesture;
@property (nonatomic, strong) JSValue * _Nullable viewWillTransition;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull orientations;
@property (nonatomic) BOOL automaticallyAdjustsScrollViewInsets;
@property (nonatomic, strong) JSValue * _Nullable currentPage;
@end


SWIFT_PROTOCOL("_TtP9SMFNative28UIViewControllerGlobalExport_")
@protocol UIViewControllerGlobalExport <JSExport>
- (void)presentViewController:(UIViewController * _Nonnull)viewcontroller;
- (void)dismissViewController;
@end

@class YGLayout;

SWIFT_PROTOCOL("_TtP9SMFNative12UIViewExport_")
@protocol UIViewExport <JSExport>
- (nonnull instancetype)init;
@property (nonatomic, readonly, strong) YGLayout * _Nonnull yoga;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic) CGFloat alpha;
@property (nonatomic) BOOL visible;
@property (nonatomic) BOOL touchEnabled;
@property (nonatomic, strong) JSValue * _Nullable onTouch;
@property (nonatomic, strong) JSValue * _Nullable onTouchEnded;
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGPoint center;
@property (nonatomic, readonly, strong) CALayer * _Nonnull layer;
@property (nonatomic) NSInteger tag;
- (void)addSubview:(UIView * _Nonnull)view;
- (void)insertSubview:(UIView * _Nonnull)view atIndex:(NSInteger)atIndex;
- (void)removeFromSuperview;
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull subviews;
- (UIView * _Nullable)viewWithTag:(NSInteger)tag SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIView * _Nullable superview;
- (void)bringSubviewToFront:(UIView * _Nonnull)view;
@property (nonatomic) UIEdgeInsets layoutMargins;
- (void)setAllAutoresizingMask;
- (BOOL)endEditing:(BOOL)force SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CAGradientLayer * _Nullable gradientLayer;
+ (void)animation:(NSTimeInterval)duration :(NSTimeInterval)delay :(JSValue * _Nonnull)animation :(JSValue * _Nonnull)completion;
- (UIViewController * _Nullable)parentViewController SWIFT_WARN_UNUSED_RESULT;
- (void)addObserver:(JSValue * _Nonnull)function :(NSNotificationName _Nonnull)aname;
- (void)removeObserver:(NSNotificationName _Nonnull)aname;
@property (nonatomic, copy) NSArray<UIGestureRecognizer *> * _Nullable gestureRecognizers;
- (void)addGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (void)removeGestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
@property (nonatomic, strong) JSValue * _Nullable didAddSubview;
@property (nonatomic, strong) JSValue * _Nullable willRemoveSubview;
@property (nonatomic, strong) JSValue * _Nullable willMoveToSuperView;
@property (nonatomic, strong) JSValue * _Nullable didMoveToSuperviewHandler;
@property (nonatomic, strong) JSValue * _Nullable willMoveToWindow;
@property (nonatomic, strong) JSValue * _Nullable didMoveToWindowHandler;
@property (nonatomic, strong) JSValue * _Nullable frameObserveHandler;
- (void)addFrameObserver;
- (void)removeFrameObserver;
@end


SWIFT_PROTOCOL("_TtP9SMFNative14UIWindowExport_")
@protocol UIWindowExport <JSExport>
- (void)makeKeyAndVisible;
@property (nonatomic, strong) UIViewController * _Nullable rootViewController;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
